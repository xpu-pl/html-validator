/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package pl.xpu.html.validator

import nu.validator.json.Serializer
import nu.validator.messages.JsonMessageEmitter
import nu.validator.messages.MessageEmitterAdapter
import nu.validator.servlet.imagereview.ImageCollector
import nu.validator.source.SourceCode
import nu.validator.validation.SimpleDocumentValidator
import nu.validator.xml.SystemErrErrorHandler
import org.xml.sax.InputSource
import org.xml.sax.SAXException

import java.nio.charset.StandardCharsets

class HtmlDocumentValidator {

	static final String SCHEMA_URL = "http://s.validator.nu/html5-rdfalite.rnc"
	SimpleDocumentValidator validator
	MessageEmitterAdapter errorHandler
	ByteArrayOutputStream out
	boolean errorsOnly

	def validateHtmlDocument(String htmlContent) throws Exception {
		try {
			ByteArrayInputStream inputStream = new ByteArrayInputStream(htmlContent.getBytes("UTF-8"))
			return validateHtmlDocument(inputStream)
		} catch (UnsupportedEncodingException e) {
			throw new Exception("Exception while validating!", e)
		}
	}

	protected validateHtmlDocument(InputStream sourceStream) throws Exception {
		try {
			setupAndValidate(sourceStream)
			String result = out.toString(StandardCharsets.UTF_8.name())
			out.close()
			return result
		} catch (UnsupportedEncodingException e) {
			throw new Exception("Exception while validating!", e)
		}
	}

	protected void setupAndValidate(InputStream sourceStream) throws Exception {
		System.setProperty("nu.validator.datatype.warn", "true")
		out = new ByteArrayOutputStream()
		validator = createValidatorWithDisabledLanguageDetection()
		try {
			setup()
			validator.checkHtmlInputSource(new InputSource(sourceStream))
			end()
		} catch (SAXException | IOException e) {
			throw new Exception(e.getMessage(), e)
		}
	}

	protected SimpleDocumentValidator createValidatorWithDisabledLanguageDetection() {
		boolean initializeLog4j = true
		boolean logUrls = true
		boolean enableLanguageDetection = false
		return new SimpleDocumentValidator(initializeLog4j, logUrls, enableLanguageDetection)
	}

	protected void setup() throws Exception, SAXException {
		setErrorHandler()
		errorHandler.setHtml(true)
		errorHandler.start(null)
		try {
			validator.setUpMainSchema(SCHEMA_URL, new SystemErrErrorHandler())
		} catch (Exception e) {
			throw new Exception(e.getMessage(), e)
		}
		validator.setUpValidatorAndParsers(errorHandler, false, false)
	}

	protected void end() throws SAXException {
		errorHandler
				.end("Document checking completed. No errors found.", "Document checking completed.", null)
	}

	protected void setErrorHandler() {
		SourceCode sourceCode = validator.getSourceCode()
		ImageCollector imageCollector = new ImageCollector(sourceCode)

		errorHandler = new MessageEmitterAdapter(null, sourceCode, false, imageCollector, 0, true, new
				JsonMessageEmitter(new Serializer(out), null, false))
		errorHandler.setErrorsOnly(errorsOnly)
	}
}